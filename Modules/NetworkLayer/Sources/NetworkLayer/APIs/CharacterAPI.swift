//
// CharacterAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CharacterAPI {

    /**
     Character list
     
     - parameter page: (query) The page number of objects to return. Defaults to 0. (optional)
     - parameter name: (query) Chracter name. (optional)
     - parameter status: (query) Character status. (optional)
     - parameter gender: (query) Character gender. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func charactersGet(page: Int? = nil, name: String? = nil, status: LivingStatus? = nil, gender: Gender? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CharacterList?, _ error: Error?) -> Void)) -> RequestTask {
        return charactersGetWithRequestBuilder(page: page, name: name, status: status, gender: gender).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Character list
     - GET /character/
     - parameter page: (query) The page number of objects to return. Defaults to 0. (optional)
     - parameter name: (query) Chracter name. (optional)
     - parameter status: (query) Character status. (optional)
     - parameter gender: (query) Character gender. (optional)
     - returns: RequestBuilder<CharacterList> 
     */
    open class func charactersGetWithRequestBuilder(page: Int? = nil, name: String? = nil, status: LivingStatus? = nil, gender: Gender? = nil) -> RequestBuilder<CharacterList> {
        let localVariablePath = "/character/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "status": (wrappedValue: status?.encodeToJSON(), isExplode: true),
            "gender": (wrappedValue: gender?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CharacterList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
    /**
     Get Episodes
     - parameter page: (query) Paging (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEpisodes(page: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EpisodeList?, _ error: Error?) -> Void)) {
        getEpisodesWithRequestBuilder(page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }
    /**
     Get Episodes
     - GET /api/episode/
     - parameter page: (query) Paging (optional)
     - returns: RequestBuilder<EpisodeList>
     */
    open class func getEpisodesWithRequestBuilder(page: Int? = nil) -> RequestBuilder<EpisodeList> {
        let path = "/episode/"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<EpisodeList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters, requiresAuthentication: false)
    }
}
